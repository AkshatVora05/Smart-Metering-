from flask import Flask, request, jsonify
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import base64

app = Flask(__name__)

# Define your AES key and IV (must match those used in the ESP node)
# Replace these with the values generated by the key generator script
AES_KEY = bytes([0x8B, 0x18, 0x45, 0x30, 0x87, 0xF8, 0x93, 0x14, 0x62, 0xF6, 0x36, 0xEA, 0x5D, 0x61, 0x06, 0x81])
AES_IV = bytes([0x0F, 0xA4, 0x01, 0x04, 0x13, 0x82, 0xA6, 0x94, 0x81, 0x08, 0x39, 0x96, 0xFE, 0x13, 0xF2, 0x5B])


def decrypt_payload(b64_ciphertext):
    """
    Decrypts a base64-encoded AES-CBC ciphertext using the shared key/IV.
    """
    try:
        # Decode base64
        ciphertext = base64.b64decode(b64_ciphertext)
        
        # Create cipher object
        cipher = AES.new(AES_KEY, AES.MODE_CBC, AES_IV)
        
        # Decrypt and unpad
        padded_plaintext = cipher.decrypt(ciphertext)
        plaintext = unpad(padded_plaintext, AES.block_size)
        
        return plaintext.decode('utf-8')
    except Exception as e:
        print(f"Decryption error: {str(e)}")
        return f"ERROR: {str(e)}"

@app.route("/data", methods=["POST"])
def receive_data():
    """
    Endpoint to receive encrypted data from ESP node.
    Expects JSON: {"data": "DATA:<prefix>:<base64_ciphertext>"}
    where prefix = deviceType-deviceNumber (unencrypted)
    """
    try:
        body = request.get_json(force=True)
        raw = body.get("data", "")
        
        print("Received encrypted data:", raw)
        
        if not raw.startswith("DATA:"):
            return "Invalid payload format", 400

        parts = raw[len("DATA:"):].split(":", 1)
        if len(parts) != 2:
            return "Missing encrypted segment", 400

        prefix, b64_ciphertext = parts
        decrypted = decrypt_payload(b64_ciphertext)

        # Log both parts
        print("Device ID:", prefix)
        print("Encrypted data:", b64_ciphertext)
        print("Decrypted data:", decrypted)

        return jsonify({
            "status": "success",
            "device": prefix,
            "decrypted": decrypted
        })

    except Exception as e:
        print(f"Error processing request: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

if __name__ == "__main__":
    print("ESP Data Server started. Listening for encrypted data on /data endpoint...")
    app.run(host="192.168.137.1", port=5000)