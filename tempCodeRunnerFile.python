import instaloader
import time
import getpass
import argparse

def get_users_not_following_back(username, password=None, session_file=None):
    """
    Get users who don't follow back an Instagram account.
    
    Args:
        username (str): Your Instagram username
        password (str, optional): Your Instagram password
        session_file (str, optional): Path to session file if you've saved one
        
    Returns:
        list: A list of usernames who don't follow you back
    """
    # Create an instance of Instaloader
    L = instaloader.Instaloader()
    
    # Login is required to access followers/following lists
    print("\nNOTE: Instagram requires login to access follower lists, even for public accounts.")
    
    if session_file:
        try:
            print(f"Loading session from {session_file}...")
            L.load_session_from_file(username, session_file)
            print("Session loaded successfully!")
        except Exception as e:
            print(f"Failed to load session: {e}")
            if not password:
                password = getpass.getpass("Enter your Instagram password: ")
            if not password:
                print("Password required. Exiting.")
                return []
            try:
                L.login(username, password)
                print("Logged in successfully!")
                # Save session for future use
                L.save_session_to_file()
                print(f"Session saved to {username}.session")
            except Exception as e:
                print(f"Login failed: {e}")
                return []
    else:
        if not password:
            password = getpass.getpass("Enter your Instagram password: ")
        if not password:
            print("Password required. Exiting.")
            return []
        try:
            print("Logging in...")
            L.login(username, password)
            print("Logged in successfully!")
            # Save session for future use
            L.save_session_to_file()
            print(f"Session saved to {username}.session")
        except Exception as e:
            print(f"Login failed: {e}")
            return []
    
    # Get user profile
    try:
        print(f"\nFetching profile for {username}...")
        profile = instaloader.Profile.from_username(L.context, username)
    except Exception as e:
        print(f"Error getting profile: {e}")
        return []
    
    print(f"\nFetching data for {profile.username} (this may take some time)...")
    print(f"Followers: {profile.followers}, Following: {profile.followees}")
    
    # Get followers and followees
    followers = set()
    followees = set()
    
    # Get followers with progress tracking
    print("\nFetching followers...")
    follower_count = 0
    try:
        for follower in profile.get_followers():
            followers.add(follower.username)
            follower_count += 1
            if follower_count % 50 == 0:
                print(f"Retrieved {follower_count} followers so far")
                time.sleep(1)  # Add small delay to avoid rate limiting
    except Exception as e:
        print(f"Error retrieving followers: {e}")
        return []
    
    # Get followees with progress tracking
    print("\nFetching accounts you follow...")
    followee_count = 0
    try:
        for followee in profile.get_followees():
            followees.add(followee.username)
            followee_count += 1
            if followee_count % 50 == 0:
                print(f"Retrieved {followee_count} followees so far")
                time.sleep(1)  # Add small delay to avoid rate limiting
    except Exception as e:
        print(f"Error retrieving followees: {e}")
        return []
    
    # Find users who don't follow back
    not_following_back = list(followees - followers)
    not_following_back.sort()  # Sort alphabetically
    
    return not_following_back

def main():
    parser = argparse.ArgumentParser(description="Find Instagram users who don't follow you back")
    parser.add_argument("-u", "--username", help="Your Instagram username")
    parser.add_argument("-s", "--session", help="Path to session file (optional)")
    args = parser.parse_args()
    
    print("=" * 50)
    print("Instagram Not Following Back Detector")
    print("=" * 50)
    print("\nThis script finds users who don't follow you back on Instagram.")
    print("\nNote: You need to install the 'instaloader' package:")
    print("pip install instaloader")
    
    username = args.username
    if not username:
        username = input("Enter your Instagram username: ")
    
    session_file = args.session
    if not session_file:
        session_file = f"{username}.session" if input(f"Try to load saved session for {username}? (y/n): ").lower() == 'y' else None
    
    not_following_back = get_users_not_following_back(username, session_file=session_file)
    
    print("\n" + "=" * 50)
    print(f"Results for {username}:")
    print("=" * 50)
    
    if not not_following_back:
        print("Could not retrieve data or everyone follows you back!")
    else:
        print(f"\nFound {len(not_following_back)} users who don't follow you back:\n")
        for i, user in enumerate(not_following_back, 1):
            print(f"{i}. {user}")
        
        # Save results to file
        filename = f"{username}_not_following_back.txt"
        with open(filename, "w") as f:
            f.write(f"Users who don't follow back {username}:\n\n")
            for user in not_following_back:
                f.write(f"{user}\n")
        
        print(f"\nResults saved to {filename}")
        print(f"\nTIP: Next time, you can use the saved session file with:")
        print(f"python script.py -u {username} -s {username}.session")

if __name__ == "__main__":
    main()